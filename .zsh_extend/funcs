#!/usr/bin/env zsh

# history all
function history-all { history -E 1 }

# when returns status code 0 then execute
# function TRAPZERR() { echo "exit:$? $@" }

# cd with ls
function cd(){ builtin cd $@ && ls && ls -alt; }

source $HOME/.zsh_extend/emacs/isemacs.sh

# cdhist
# source $HOME/.zsh_extend/cdhist/cdhist.sh

# Colorful
export_grep_color(){
    x=$GREP_COLOR;
    export GREP_COLOR=$1;
    grep --color=always $2;
    export GREP_COLOR=$x
}
#alias grep=' export_grep_color "01;31" $1' # red
alias grep1=' export_grep_color "01;32" $1' # green
alias grep2=' export_grep_color "01;33" $1' # yellow
alias grep3=' export_grep_color "01;34" $1' # blue
alias grep4=' export_grep_color "01;35" $1' # purple
alias grep5=' export_grep_color "01;36" $1' # light blue
alias grep6=' export_grep_color "01;37" $1' # white


# extract archive
function extract (){
  if [ -f $1 ] ; then
    case $1 in
        *.tar.bz2) echo "tar xvjf $1"   && tar xvjf $1      ;;
        *.tar.gz)  echo "tar xvzf $1"   && tar xvzf $1      ;;
        *.tar.xz)  echo "tar xvJf $1"   && tar xvJf $1      ;;
        *.bz2)     echo "bunzip2 $1"    && bunzip2 $1       ;;
        *.rar)     echo "unrar x $1"    && unrar x $1       ;;
        *.gz)      echo "gunzip $1"     && gunzip $1        ;;
        *.tar)     echo "tar xvf $1"    && tar xvf $1       ;;
        *.tbz2)    echo "tar xvjf $1"   && tar xvjf $1      ;;
        *.tgz)     echo "tar xvzf $1"   && tar xvzf $1      ;;
        *.zip)     echo "unzip $1"      && unzip $1         ;;
        *.Z)       echo "uncompress $1" && uncompress $1    ;;
        *.7z)      echo "7z x $1"       && 7z x $1          ;;
        *.lzma)    echo "lzma -dv $1"   && lzma -dv $1      ;;
        *.xz)      echo "xz -dv $1"     && xz -dv $1        ;;
        *)         echo "don't know how to extract '$1'..." ;;
    esac
  else
    echo "'$1' is not a valid file!"
  fi
}

function pcolor() {
    for ((f = 0; f < 255; f++)); do
        printf "\e[38;5;%dm %3d*â– \e[m" $f $f
        if [[ $f%8 -eq 7 ]] then
            printf "\n"
        fi
    done
    echo
    echo
    [[ -s $HOME/bin/256colors2.pl ]] && 256colors2.pl
    echo
}


# http://d.hatena.ne.jp/tototoshi/20120113/1326470543
function lw() {
    sed -e 's/</\&lt;/g' |\
    sed -e 's/>/\&gt;/g' |\
    sed -e 's/\&/\&amp;/g' |\
    # sed -e 's/[^:]*/<a href="\0">\0<\/a>/' |\
    sed -e 's/\([^:]*\)/<a href="\1">\1<\/a>/' |\
    sed -e 's/$/<br\/>/' |\
    EDITOR='vim' w3m -T text/html
}


# anything.el like zaw.
# source $HOME/.zsh_extend/zaw/zaw.zsh 2> /dev/null
# bindkey '^;' zaw
# bindkey '^R' zaw-history

# zmv command - http://d.hatena.ne.jp/mollifier/20101227/p1
autoload -Uz zmv
alias zmv='noglob zmv -W'


# ruby tags
function rtags() {
    echo "ctags -f ~/rtags -R --langmap=RUBY:.rb --sort=yes `rvm gemdir` "
    ctags -f ~/rtags -R --langmap=RUBY:.rb --sort=yes `rvm gemdir`
    echo "ctags -f ~/rtags -R --langmap=RUBY:.rb --sort=yes . "
    ctags -a -f ~/rtags -R --langmap=RUBY:.rb --sort=yes .
}

# Colors
() {

    function red_color() {
        local NORMAL=$(tput sgr0)
        local RED=$(tput setaf 1)

        echo -e "$RED$*$NORMAL"
    }

    function green_color() {
        local NORMAL=$(tput sgr0)
        local GREEN=$(tput setaf 2; tput bold)

        echo -e "$GREEN$*$NORMAL"
    }

    function yellow_color() {
        local NORMAL=$(tput sgr0)
        local YELLOW=$(tput setaf 3)

        echo -e "$YELLOW$*$NORMAL"
    }

}

vimR () {
    echo -n "vim -c ':argdo %s/no-example/just-sample/g | update' **/*.go" > /dev/null
    echo -n "vim -c ':argdo %s/no-example/just-sample/gce | update' **/*.go" > /dev/null

    echo "vim -c ':argdo $1 | update' $2"
    vim -c ":argdo $1 | update" $2
}

sshEX () {
  echo 'xpanes -s -t -c "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no {}" user@host1 user@host2 user@host3'
}


if [ $ARCHI = darwin ]; then
  ;
fi
if [ $ARCHI = freebsd ]; then
  ;
fi
if [ $ARCHI = linux ]; then
  function open() { ls $@ | while read -r file; do xdg-open "$file"; done }
fi
if [ $ARCHI = cygwin ]; then
  ;
fi


# env loader

function gen_rvm_postzshrc() {
cat << EOF > $HOME/.rvm_postzshrc 2>&1
#
# auto ganerate post zshrc
#
(rvm_use `rvm current` &) > /dev/null
PS1="(`basename $GEM_HOME`@rvm)\$PS1"
EOF
}

function gen_kerl_postzshrc() {
cat << EOF > $HOME/.kerl_postzshrc 2>&1
#
# auto ganerate post zshrc
#
kerl_use `cat ~/.kerl/version` > /dev/null
PS1="(`cat ~/.kerl/version`@erlang)\$PS1"
EOF

}

function gen_exenv_postzshrc() {
cat << EOF > $HOME/.exenv_postzshrc 2>&1
#
# auto ganerate post zshrc
#
(exenv_use `cat ~/.exenv/version` &) > /dev/null
PS1="(`cat ~/.exenv/version`@elixir)\$PS1"
EOF
}


function gen_rbenv_postzshrc() {
cat << EOF > $HOME/.rbenv_postzshrc 2>&1
#
# auto ganerate post zshrc
#
(rbenv_use `cat ~/.rbenv/version` &) > /dev/null
PS1="(`cat ~/.rbenv/version`@rbenv)\$PS1"
EOF
}

function gen_golang_postzshrc() {
cat << EOF > $HOME/.golang_postzshrc 2>&1
#
# auto ganerate post zshrc
#
source $HOME/.gvm/environments/default
(golang_use `echo $gvm_go_name` &) &> /dev/null
PS1="(`echo $gvm_go_name | sed -e 's/go//g'`@go)\$PS1"
clear
EOF
}

function gen_virtualenvwrapper_postzshrc() {
cat << EOF > $HOME/.virtualenvwrapper_postzshrc 2>&1
#
# auto ganerate post zshrc
#
workon `basename $VIRTUAL_ENV`
EOF
}

function rbenv_use() {
    rbenv global $@
    gen_rbenv_postzshrc  # ganegate rc file
}

function exenv_use() {
    exenv global $@
    gen_exenv_postzshrc  # ganegate rc file
}
function kerl_use() {
    . ~/opt/${@}/activate

    echo -n $@ > ~/.kerl/version
    gen_kerl_postzshrc  # ganegate rc file
}

function golang_use() {
    (yes | gvm use $@ --default) > /dev/null
    gen_golang_postzshrc  # ganegate rc file
}

function rvm_use() {
    rvm use $@
    # ganegate rc file
    gen_rvm_postzshrc
}

function nvm_use() {
    nvm use $@
    export NODE_PATH=${NVM_PATH}_modules
}

function cpan_callable() {
  PATH="$HOME/perl5/bin${PATH:+:${PATH}}"
  PERL5LIB="$HOME/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
  PERL_LOCAL_LIB_ROOT="$HOME/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
  PERL_MB_OPT="--install_base \"$HOME/perl5\""; export PERL_MB_OPT;
  PERL_MM_OPT="INSTALL_BASE=$HOME/perl5"; export PERL_MM_OPT;
}

function urlencode {
  echo "$1" | nkf -WwMQ | sed 's/=$//g' | tr = % | tr -d '\n'
}
